class No(val valor: Int) {
    var esquerda: No? = null
    var direita: No? = null
}

class ArvoreBinaria {
    var raiz: No? = null

    fun inserir(valor: Int) {
        raiz = inserirRec(raiz, valor)
    }

    private fun inserirRec(no: No?, valor: Int): No {
        if (no == null) return No(valor)

        if (valor < no.valor) {
            no.esquerda = inserirRec(no.esquerda, valor)
        } else {
            no.direita = inserirRec(no.direita, valor)
        }
        return no
    }

    // EM ORDEM (LNR)
    fun emOrdem(no: No? = raiz) {
        if (no != null) {
            emOrdem(no.esquerda)
            print("${no.valor} ")
            emOrdem(no.direita)
        }
    }

    // PRÉ-ORDEM (NLR)
    fun preOrdem(no: No? = raiz) {
        if (no != null) {
            print("${no.valor} ")
            preOrdem(no.esquerda)
            preOrdem(no.direita)
        }
    }

    // PÓS-ORDEM (LRN)
    fun posOrdem(no: No? = raiz) {
        if (no != null) {
            posOrdem(no.esquerda)
            posOrdem(no.direita)
            print("${no.valor} ")
        }
    }
}
